### 设置###

##### 配置根Logger,其语法为: #####
#	log4j.rootLogger = [ level ] , appenderName, appenderName, …
#	语法说明:
#	@level  取值 {OFF,FATAL,ERROR,WARN,INFO,DEBUG,ALL} 建议只用四个级别，优先级从高到低为{ERROR,WARN,INFO,DEBUG},
#		低于level级别的日志将不会别打印
#	@appenderName 指定日志输出到哪个地方， 可以指定多可目的地
#	appender 有以下几种:
#		org.apache.log4j.ConsoleAppender (控制台)
#		org.apache.log4j.FileAppender 	(文件)
#		org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)
#		org.apache.log4j.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)
#		org.apache.log4j.WriterAppender (将日志信息已流格式发送到任意指定的地方)
#
log4j.rootLogger = DEBUG,stdout,D,E
logs.dir=D://logs/yiwu/


##### 配置日志信息输出目的地Appender，其语法为： #####
#	log4j.appender.appenderName = fully.qualified.name.of.appender.class  
#	log4j.appender.appenderName.option1 = value1  
#	。。。。。。  
#	log4j.appender.appenderName.option = valueN
#
### 输出信息到控制抬  ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Threshold = DEBUG
##### 配置日志信息的格式（布局），其语法为：#####
#	log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class 
#	#log4j提供的layout有以下几种:
#	#	org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#	# 	org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#	#	org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#	#	org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#	log4j.appender.appenderName.layout.option1 = value1  
#	......  
#	log4j.appender.appenderName.layout.option = valueN
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下#
#	%m 输出代码中指定的消息
#	%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
#	%r 输出自应用启动到输出该log信息耗费的毫秒数  
#	%c 输出所属的类目，通常就是所在类的全名  
#	%t 输出产生该日志事件的线程名  
#	%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
#	%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
#	%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n


### 输出DEBUG 级别以上的日志到=D://logs/debug.log ###
log4j.appender.D = org.apache.log4j.RollingFileAppender
log4j.appender.D.File = ${logs.dir}/debug.log
log4j.appender.D.encoding=UTF-8
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  method:%l%n%m%n
log4j.appender.D.MaxFileSize =20MB
log4j.appender.D.MaxBackupIndex = 10

### 输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =${logs.dir}/error.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = WARN 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  method:%l%n%m%n


##### 在代码中使用Log4j #####
# 1.得到记录器
# 	public static Logger getLogger( String name)
# 2.读取配置文件
# 	BasicConfigurator.configure ()： 自动快速地使用缺省Log4j环境。  
# 	PropertyConfigurator.configure ( String configFilename) ：读取使用Java的特性文件编写的配置文件。  
# 	DOMConfigurator.configure ( String filename ) ：读取XML形式的配置文件。
# 3.插入记录信息
# 	Logger.debug ( Object message ) ;  
# 	Logger.info ( Object message ) ;  
# 	Logger.warn ( Object message ) ;  
# 	Logger.error ( Object message ) ;